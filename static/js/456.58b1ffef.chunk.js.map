{"version":3,"file":"static/js/456.58b1ffef.chunk.js","mappings":"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","sources":["webpack://codestates-fe-advanced-course/./src/components/Posts/css/Post.module.css?7a56","webpack://codestates-fe-advanced-course/./src/components/Comment/css/CommentList.module.css?21e3","components/Comment/CommentList.tsx","components/Posts/Post.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Post_backdrop__4q0BX\",\"post-container\":\"Post_post-container__XYC5K\",\"content\":\"Post_content__grXTN\",\"content-header\":\"Post_content-header__T+KfI\",\"author\":\"Post_author__PbHDn\",\"content-body\":\"Post_content-body__sILi-\",\"actions\":\"Post_actions__x-t30\",\"disabled\":\"Post_disabled__AjyNA\"};","// extracted by mini-css-extract-plugin\nexport default {\"comment-list\":\"CommentList_comment-list__i0Ri8\",\"comment-count\":\"CommentList_comment-count__LbuJC\",\"comment\":\"CommentList_comment__IhQM+\",\"comment-icon\":\"CommentList_comment-icon__CxZVe\",\"comment-profile\":\"CommentList_comment-profile__ckhj5\",\"comment-content\":\"CommentList_comment-content__+PHsU\"};","import { CommentType } from \"../DataType\";\nimport styles from \"./css/CommentList.module.css\";\nimport { FaRegCommentDots } from \"react-icons/fa\";\ninterface PropsType {\n  comments: CommentType[];\n}\n\nfunction Comments(props: PropsType) {\n  return (\n    <ul className={styles[\"comment-list\"]}>\n      <p>\n        <FaRegCommentDots className={styles[\"comment-icon\"]} />\n\n        <span\n          className={styles[\"comment-count\"]}\n        >{` Comments (${props.comments.length})`}</span>\n      </p>\n      {props.comments.map((comment) => (\n        <li key={comment.id} className={styles[\"comment\"]}>\n          <img\n            className={styles[\"comment-profile\"]}\n            src=\"https://static.nid.naver.com/images/web/user/default.png?type=s40\"\n            alt=\"profile\"\n          />\n          <div className={styles[\"comment-content\"]}>\n            <h4>{comment.name}</h4>\n            <p>{comment.body}</p>\n            <div>\n              <span>{comment.email}</span>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Comments;\n","import styles from \"./css/Post.module.css\";\nimport Card from \"../UI/Card\";\nimport { PostType, CommentType } from \"../DataType\";\nimport Button from \"../UI/Button\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentList from \"../Comment/CommentList\";\nimport { useAppSelector } from \"../../hooks/redux-hooks\";\n\ninterface PropsType {\n  post: PostType;\n  onClose: () => void;\n}\n\nfunction Post(props: PropsType) {\n  const [comments, setComments] = useState<CommentType[]>([]);\n  const [currentPost, setCurrentPost] = useState(props.post);\n  const [currentPostIndex, setCurrentPostIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [prevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [nextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const { filteredPosts: posts } = useAppSelector((state) => state.post);\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios\n      .get(\n        `https://jsonplaceholder.typicode.com/posts/${currentPost.id}/comments`\n      )\n      .then((res) => {\n        setComments(res.data);\n        setIsLoading(false);\n      });\n  }, [currentPost.id]);\n\n  useEffect(() => {\n    let currentIndex = posts.findIndex((post) => post.id === currentPost.id);\n    if (currentIndex === 0) {\n      setPrevButtonDisabled(true);\n    }\n    if (currentIndex === posts.length - 1) {\n      setNextButtonDisabled(true);\n    }\n    setCurrentPostIndex(currentIndex);\n  }, [posts, currentPost.id]);\n\n  function prevButtonHandler() {\n    if (currentPostIndex === 0) {\n      setPrevButtonDisabled(true);\n      return;\n    }\n\n    let newCurrentPost = posts[currentPostIndex - 1];\n    setCurrentPost(newCurrentPost);\n    setCurrentPostIndex((currentIndex) => currentIndex - 1);\n    setNextButtonDisabled(false);\n  }\n\n  function nextButtonHandler() {\n    if (currentPostIndex === posts.length - 1) {\n      setNextButtonDisabled(true);\n      return;\n    }\n    let newCurrentPost = posts[currentPostIndex + 1];\n    setCurrentPost(newCurrentPost);\n    setCurrentPostIndex((currentIndex) => currentIndex + 1);\n    setPrevButtonDisabled(false);\n  }\n\n  return (\n    <>\n      <div className={styles[\"backdrop\"]} onClick={props.onClose}></div>\n      <Card className={styles[\"post-container\"]}>\n        <div className={styles[\"content\"]}>\n          <header className={styles[\"content-header\"]}>\n            <h1>{currentPost.title}</h1>\n            <div className={styles[\"author\"]}>\n              <span>{`작성자 ${currentPost.userId}`}</span>\n            </div>\n          </header>\n          <p className={styles[\"content-body\"]}>{currentPost.body}</p>\n        </div>\n        {!isLoading && <CommentList comments={comments} />}\n        {isLoading && <LoadingSpinner />}\n        <footer>\n          <span>{`${currentPostIndex + 1} / ${posts.length}개의 글`}</span>\n          <div className={styles[\"actions\"]}>\n            <Button\n              type=\"button\"\n              onClick={prevButtonHandler}\n              className={prevButtonDisabled ? styles[\"disabled\"] : \"\"}\n            >\n              이전 글\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={nextButtonHandler}\n              className={nextButtonDisabled ? styles[\"disabled\"] : \"\"}\n            >\n              다음 글\n            </Button>\n            <Button type=\"button\" onClick={props.onClose}>\n              닫기\n            </Button>\n          </div>\n        </footer>\n      </Card>\n    </>\n  );\n}\n\nexport default Post;\n"],"names":["props","className","styles","comments","length","map","comment","src","alt","name","body","email","id","useState","setComments","post","currentPost","setCurrentPost","currentPostIndex","setCurrentPostIndex","isLoading","setIsLoading","prevButtonDisabled","setPrevButtonDisabled","nextButtonDisabled","setNextButtonDisabled","posts","useAppSelector","state","filteredPosts","useEffect","axios","then","res","data","currentIndex","findIndex","onClick","onClose","Card","title","userId","CommentList","LoadingSpinner","Button","type","newCurrentPost"],"sourceRoot":""}